from abc import ABC, abstractmethod

class CityFactory(ABC):
    @abstractmethod
    def create_city(self):
        pass

class RoadFactory(CityFactory):
    def create_city(self):
        return Road()

class BuildingFactory(CityFactory):
    def create_city(self):
        return Building()

class ParkFactory(CityFactory):
    def create_city(self):
        return Park()

class Road:
    def rabotaet(self):
        print("Дорога открыты")

class Building:
    def rabotaet(self):
        print("Зданий построены")

class Park:
    def rabotaet(self):
        print("Парки работают")

class City:
    def __init__(self):
        self.road = Road()
        self.building = Building()
        self.park = Park()

    def est(self):
        self.road.otkryty()
        self.building.salyndy()
        self.park.rabotaet()

        print("Город существует")

def city_rabotaet(factory: CityFactory):
    obj = factory.create_city()
    print("{city.est()}")

road_factory = RoadFactory()
building_factory = BuildingFactory()
park_factory = ParkFactory()
city_rabotaet(road_factory)
city_rabotaet(building_factory)
city_rabotaet(park_factory)