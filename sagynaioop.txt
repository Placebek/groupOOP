from abc import ABC, abstractmethod

class Dostavka:
    def __init__(self, post_id, stuff: str):
        self.post_id = post_id
        self.stuff = stuff

class DeliveryStrategy(ABC):
    @abstractmethod
    def deliver(self, post: str):
        pass

class CarDelivery(DeliveryStrategy):
    def deliver(self, post: str):
        print(f"CarDelivery posted: {post}")

class DronDelivery(DeliveryStrategy):
    def deliver(self, post: str):
        print(f"DronDelivery posted:{post}")

class DeliveryService:
    def __init__(self, poster.DeliveryStrategy)
        self.poster = poster
    def posts(self, post: str)
        self.posts.deliver(post)

dostavka = Dostavka(post_id = 123, stuff = "Car Toy")

car_delivery = DeliveryService(CarDelivery())
car_poster.posts(f"Mashina dostavka{dostavka.dostavka_id} jetkizildi. zat: (dostavka.stuff)")
dron_delivery = DeliveryService(DronDelivery())
dron_poster.posts(f"Dron dostavka{dostavka.dostavka_id} jetkizildi. zat: (dostavka.stuff)")


